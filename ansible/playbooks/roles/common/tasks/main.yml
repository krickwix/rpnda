---
- name: update packages (deb)
  apt: upgrade=dist
  when: ansible_os_family == "Debian" and force_pkg_update == true

- name: update packages (yum)
  yum: name=* state=latest
  when: ansible_os_family == "RedHat" and ansible_pkg_mgr == "yum" and force_pkg_update == true

- name: update packages (dnf)
  command: dnf -y update
  when: ansible_os_family == "RedHat" and ansible_pkg_mgr == "dnf" and force_pkg_update == true

- name: install packages
  command: dnf -y install libselinux-python python2-dnf
  when: ansible_os_family == "RedHat" and ansible_pkg_mgr == "dnf" and force_pkg_update == true

- name: Disable service initial-setup
  systemd: name=initial-setup enabled=no state=stopped
  when: ansible_service_mgr == 'systemd' and ansible_architecture == "armv7l"
  ignore_errors: yes

- name: Disable service firewalld
  systemd: name=firewalld enabled=no state=stopped
  when: ansible_service_mgr == 'systemd'
  ignore_errors: yes

- name: Set hosts file
  template: src=hosts.j2 dest=/etc/hosts mode=0644

- name: Set hostname
  hostname:
    name: "{{ ansible_host }}"

- stat: path=/opt/jdk{{ jdk_version_file }}
  register: jdk_install_rules

- name: download Oracle JDK (x64)
  get_url:
    url:     "{{ jdk_url_base }}/{{ jdk_file_base }}-x64.tar.gz"
    headers: 'Cookie:oraclelicense=accept-securebackup-cookie'
    dest:    "/{{ jdk_extract_dir }}/{{ jdk_file_base }}-x64.tar.gz"
  when:
    - jdk_install_rules.stat.exists == false
    - ansible_architecture == "x86_64"

- name: unarchive JDK (x64)
  unarchive:
    src: "/{{ jdk_extract_dir }}/{{ jdk_file_base }}-x64.tar.gz"
    dest: /opt
    remote_src: True
  when:
    - jdk_install_rules.stat.exists == false
    - ansible_architecture == "x86_64"

- name: download Oracle JDK (arm)
  get_url:
    url:     "{{ jdk_url_base }}/{{ jdk_file_base }}-arm32-vfp-hflt.tar.gz"
    headers: 'Cookie:oraclelicense=accept-securebackup-cookie'
    dest:    "/{{ jdk_extract_dir }}/{{ jdk_file_base }}-arm32-vfp-hflt.tar.gz"
  when:
    - jdk_install_rules.stat.exists == false
    - ansible_architecture == "armv7l"

- name: unarchive JDK (arm)
  unarchive:
    src: "/{{ jdk_extract_dir }}/{{ jdk_file_base }}-arm32-vfp-hflt.tar.gz"
    dest: /opt
    remote_src: True
  when:
    - jdk_install_rules.stat.exists == false
    - ansible_architecture == "armv7l"

- name: link JDK bin
  file:
    src: "/opt/jdk{{ jdk_version_file }}/bin/java"
    dest: /usr/bin/java
    state: link
    force: yes
