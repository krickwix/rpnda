---
- include_vars: group_vars/hadoop

- name: Check hadoop installation
  stat: path=/opt/{{ hadoop_file_base }}
  register: hadoop_install_rules

- name: Check hadoop namenode created
  stat: path={{ hdfs_tmp_dir }}/dfs/name/current
  register: hdfs_namenode_dir

- name: Download hadoop archive
  get_url:
    url: "{{ hadoop_url }}"
    dest: "/tmp/{{ hadoop_file_base }}.tar.gz"
  when: hadoop_install_rules.stat.exists == false

- name: Unarchive hadoop
  unarchive:
    src: "/tmp/{{ hadoop_file_base }}.tar.gz"
    dest: /opt
    remote_src: True
  when: hadoop_install_rules.stat.exists == false

- name: Configure namenode
  template: src=templates/hdfs-site.xml.j2 dest=/opt/{{ hadoop_file_base }}/etc/hadoop/hdfs-site.xml
  template: src=templates/hdfs-site.xml.j2 dest=/opt/{{ hadoop_file_base }}/etc/hadoop/core-site.xml

- name: Format namenode
  environment:
    - JAVA_HOME: /opt/jdk{{ jdk_version_file }}
  command: /opt/{{ hadoop_file_base }}/bin/hdfs namenode -format
  when: hdfs_namenode_dir.stat.exists == false

- name: Create hdfs namenode unit file
  template: src=templates/hdfs_nn.service.j2 dest=/lib/systemd/system/hdfs_nn.service
  when: ansible_service_mgr == 'systemd'
  notify:
    - Reload systemctl
    - Restart hdfs_nn service

- name: Restart hdfs_nn service
  service: name=hdfs_nn state=restarted
